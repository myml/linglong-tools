/*
linglong仓库

玲珑仓库接口

API version: 1.0.0
Contact: wurongjie@deepin.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiserver

import (
	"encoding/json"
)

// checks if the SchemaRepoInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaRepoInfo{}

// SchemaRepoInfo struct for SchemaRepoInfo
type SchemaRepoInfo struct {
	Mode *string `json:"mode,omitempty"`
	Name *string `json:"name,omitempty"`
	Refs []string `json:"refs,omitempty"`
}

// NewSchemaRepoInfo instantiates a new SchemaRepoInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaRepoInfo() *SchemaRepoInfo {
	this := SchemaRepoInfo{}
	return &this
}

// NewSchemaRepoInfoWithDefaults instantiates a new SchemaRepoInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaRepoInfoWithDefaults() *SchemaRepoInfo {
	this := SchemaRepoInfo{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *SchemaRepoInfo) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRepoInfo) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *SchemaRepoInfo) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *SchemaRepoInfo) SetMode(v string) {
	o.Mode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SchemaRepoInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRepoInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SchemaRepoInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SchemaRepoInfo) SetName(v string) {
	o.Name = &v
}

// GetRefs returns the Refs field value if set, zero value otherwise.
func (o *SchemaRepoInfo) GetRefs() []string {
	if o == nil || IsNil(o.Refs) {
		var ret []string
		return ret
	}
	return o.Refs
}

// GetRefsOk returns a tuple with the Refs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaRepoInfo) GetRefsOk() ([]string, bool) {
	if o == nil || IsNil(o.Refs) {
		return nil, false
	}
	return o.Refs, true
}

// HasRefs returns a boolean if a field has been set.
func (o *SchemaRepoInfo) HasRefs() bool {
	if o != nil && !IsNil(o.Refs) {
		return true
	}

	return false
}

// SetRefs gets a reference to the given []string and assigns it to the Refs field.
func (o *SchemaRepoInfo) SetRefs(v []string) {
	o.Refs = v
}

func (o SchemaRepoInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaRepoInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Refs) {
		toSerialize["refs"] = o.Refs
	}
	return toSerialize, nil
}

type NullableSchemaRepoInfo struct {
	value *SchemaRepoInfo
	isSet bool
}

func (v NullableSchemaRepoInfo) Get() *SchemaRepoInfo {
	return v.value
}

func (v *NullableSchemaRepoInfo) Set(val *SchemaRepoInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaRepoInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaRepoInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaRepoInfo(val *SchemaRepoInfo) *NullableSchemaRepoInfo {
	return &NullableSchemaRepoInfo{value: val, isSet: true}
}

func (v NullableSchemaRepoInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaRepoInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


