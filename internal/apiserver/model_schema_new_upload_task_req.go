/*
linglong仓库

玲珑仓库接口

API version: 1.0.0
Contact: wurongjie@deepin.org
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apiserver

import (
	"encoding/json"
)

// checks if the SchemaNewUploadTaskReq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchemaNewUploadTaskReq{}

// SchemaNewUploadTaskReq struct for SchemaNewUploadTaskReq
type SchemaNewUploadTaskReq struct {
	Ref *string `json:"ref,omitempty"`
	RepoName *string `json:"repoName,omitempty"`
}

// NewSchemaNewUploadTaskReq instantiates a new SchemaNewUploadTaskReq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaNewUploadTaskReq() *SchemaNewUploadTaskReq {
	this := SchemaNewUploadTaskReq{}
	return &this
}

// NewSchemaNewUploadTaskReqWithDefaults instantiates a new SchemaNewUploadTaskReq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaNewUploadTaskReqWithDefaults() *SchemaNewUploadTaskReq {
	this := SchemaNewUploadTaskReq{}
	return &this
}

// GetRef returns the Ref field value if set, zero value otherwise.
func (o *SchemaNewUploadTaskReq) GetRef() string {
	if o == nil || IsNil(o.Ref) {
		var ret string
		return ret
	}
	return *o.Ref
}

// GetRefOk returns a tuple with the Ref field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaNewUploadTaskReq) GetRefOk() (*string, bool) {
	if o == nil || IsNil(o.Ref) {
		return nil, false
	}
	return o.Ref, true
}

// HasRef returns a boolean if a field has been set.
func (o *SchemaNewUploadTaskReq) HasRef() bool {
	if o != nil && !IsNil(o.Ref) {
		return true
	}

	return false
}

// SetRef gets a reference to the given string and assigns it to the Ref field.
func (o *SchemaNewUploadTaskReq) SetRef(v string) {
	o.Ref = &v
}

// GetRepoName returns the RepoName field value if set, zero value otherwise.
func (o *SchemaNewUploadTaskReq) GetRepoName() string {
	if o == nil || IsNil(o.RepoName) {
		var ret string
		return ret
	}
	return *o.RepoName
}

// GetRepoNameOk returns a tuple with the RepoName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaNewUploadTaskReq) GetRepoNameOk() (*string, bool) {
	if o == nil || IsNil(o.RepoName) {
		return nil, false
	}
	return o.RepoName, true
}

// HasRepoName returns a boolean if a field has been set.
func (o *SchemaNewUploadTaskReq) HasRepoName() bool {
	if o != nil && !IsNil(o.RepoName) {
		return true
	}

	return false
}

// SetRepoName gets a reference to the given string and assigns it to the RepoName field.
func (o *SchemaNewUploadTaskReq) SetRepoName(v string) {
	o.RepoName = &v
}

func (o SchemaNewUploadTaskReq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchemaNewUploadTaskReq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ref) {
		toSerialize["ref"] = o.Ref
	}
	if !IsNil(o.RepoName) {
		toSerialize["repoName"] = o.RepoName
	}
	return toSerialize, nil
}

type NullableSchemaNewUploadTaskReq struct {
	value *SchemaNewUploadTaskReq
	isSet bool
}

func (v NullableSchemaNewUploadTaskReq) Get() *SchemaNewUploadTaskReq {
	return v.value
}

func (v *NullableSchemaNewUploadTaskReq) Set(val *SchemaNewUploadTaskReq) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaNewUploadTaskReq) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaNewUploadTaskReq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaNewUploadTaskReq(val *SchemaNewUploadTaskReq) *NullableSchemaNewUploadTaskReq {
	return &NullableSchemaNewUploadTaskReq{value: val, isSet: true}
}

func (v NullableSchemaNewUploadTaskReq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaNewUploadTaskReq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


